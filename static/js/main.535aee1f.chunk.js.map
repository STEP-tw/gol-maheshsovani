{"version":3,"sources":["_src/gameOfLife.js","_src/gameOfLifeUtil.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","zipper","validateNeighbours","contains","findNeighboursOfCell","cell","bounds","xCoordinates","yCoordinates","zip","allNeighbours","reduce","splice","validateNeighbour","bind","filter","findAllNeighbours","limits","concat","row","column","aliveNeighboursCalculator","currentGeneration","result","isAlive","length","calculateAliveNeighboursOfCell","calculateAliveNeighbours","cells","Object","keys","aliveNeighboursOfEachCell","module","exports","nextGeneration","neighboursState","allCells","rulesApplier","JSON","parse","nextGen","map","element","index","push","neighbour","startPoint","topLeft","endPopint","bottomRight","isValid","some","Cell","react_default","a","createElement","width","height","fill","this","props","color","x","col","y","stroke","strokeWidth","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","colors","i","j","src_Cell","genCells","forEach","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.535aee1f.chunk.js","sourcesContent":["const { zipper, validateNeighbours, contains } = require(\"./gameOfLifeUtil.js\");\n\nconst findNeighboursOfCell = function(cell, bounds) {\n  let xCoordinates = [cell[0] - 1, cell[0], cell[0] + 1];\n  let yCoordinates = [cell[1] - 1, cell[1], cell[1] + 1];\n  let zip = zipper(yCoordinates);\n  let allNeighbours = xCoordinates.reduce(zip, []);\n  allNeighbours.splice(4, 1);\n  let validateNeighbour = validateNeighbours.bind(null, bounds);\n  let allValidNeighbours = allNeighbours.filter(validateNeighbour);\n  return allValidNeighbours;\n};\n\nconst findAllNeighbours = function(bounds) {\n  let limits = bounds[\"bottomRight\"].concat(bounds[\"topLeft\"]);\n  let allNeighbours = {};\n  for (let row = limits[2]; row <= limits[0]; row++) {\n    for (let column = limits[3]; column <= limits[1]; column++) {\n      allNeighbours[\"[\" + row + \", \" + column + \"]\"] = findNeighboursOfCell(\n        [row, column],\n        bounds\n      );\n    }\n  }\n  return allNeighbours;\n};\n\nconst calculateAliveNeighboursOfCell = function(\n  allNeighbours,\n  currentGeneration,\n  cell\n) {\n  let isAlive = contains.bind(null, currentGeneration);\n  return allNeighbours[cell].filter(isAlive).length;\n};\n\nconst aliveNeighboursCalculator = function(allNeighbours, currentGeneration) {\n  return function(result, cell) {\n    result[cell] = calculateAliveNeighboursOfCell(\n      allNeighbours,\n      currentGeneration,\n      cell\n    );\n    return result;\n  };\n};\n\nconst calculateAliveNeighbours = function(allNeighbours, currentGeneration) {\n  let cells = Object.keys(allNeighbours);\n  let aliveNeighboursOfEachCell = aliveNeighboursCalculator(\n    allNeighbours,\n    currentGeneration\n  );\n  let neighboursState = cells.reduce(aliveNeighboursOfEachCell, {});\n  return neighboursState;\n};\n\nconst applyRules = function(neighboursState, currentGeneration, cell) {\n  let isAlive = neighboursState[cell] === 3;\n  isAlive =\n    isAlive ||\n    (neighboursState[cell] === 2 &&\n      contains(currentGeneration, JSON.parse(cell)));\n  return isAlive;\n};\n\nconst nextGeneration = function(currentGeneration, bounds) {\n  let allNeighbours = findAllNeighbours(bounds);\n  let neighboursState = calculateAliveNeighbours(\n    allNeighbours,\n    currentGeneration\n  );\n  let allCells = Object.keys(neighboursState);\n  let rulesApplier = applyRules.bind(null, neighboursState, currentGeneration);\n  let nextGen = allCells.filter(rulesApplier);\n  nextGen = nextGen.map(cell => JSON.parse(cell));\n  return nextGen;\n};\n\nmodule.exports = {\n  findNeighboursOfCell,\n  findAllNeighbours,\n  calculateAliveNeighbours,\n  nextGeneration\n};\n","const zipper = function(yCoordinates) {\n  return function(result, element) {\n    for (let index = 0; index < yCoordinates.length; index++) {\n      result.push([element, yCoordinates[index]]);\n    }\n    return result;\n  };\n};\n\nconst validateNeighbours = function(bounds, neighbour) {\n  let startPoint = bounds.topLeft;\n  let endPopint = bounds.bottomRight;\n  let isValid = neighbour[0] >= startPoint[0] && neighbour[0] <= endPopint[0];\n  isValid =\n    isValid && neighbour[1] >= startPoint[1] && neighbour[1] <= endPopint[1];\n  return isValid;\n};\n\nconst contains = function(currentGeneration, neighbour) {\n  let isContained = currentGeneration.some(function(cell) {\n    return cell[0] === neighbour[0] && cell[1] === neighbour[1];\n  });\n  return isContained;\n};\n\nmodule.exports = { zipper, validateNeighbours, contains };\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}